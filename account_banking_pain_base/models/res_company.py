# -*- coding: utf-8 -*-
#    Copyright (C) 2013-2017 Akretion (http://www.akretion.com)
#    Copyright (C) 2016-2017 SHS-AV s.r.l. <https://www.zeroincombenze.it>
#
# License AGPL-3.0 or later (http://www.gnu.org/licenses/agpl).
#
# [2013: Akretion] First version
# [2017: SHS-AV] Italian localization

from openerp.osv import orm, fields


class res_company(orm.Model):
    _inherit = 'res.company'

    _columns = {
        'initiating_party_issuer': fields.char(
            'Initiating Party Issuer', size=35,
            help="This will be used as the 'Initiating Party Issuer' in the "
            "PAIN files generated by OpenERP."),
        # 'initiating_party_identifier': fields.char(
        #     string='Initiating Party Identifier', size=35,
        #     help="This will be used as the 'Initiating Party Identifier' in "
        #     "the PAIN files generated by Odoo.")
    }

    def _get_initiating_party_identifier(
            self, cr, uid, company_id, context=None):
        '''The code here may be different from one country to another.
        If you need to add support for an additionnal country, you can
        contribute your code here or inherit this function in the
        localization modules for your country'''
        assert isinstance(company_id, int), 'Only one company ID'
        company = self.browse(cr, uid, company_id, context=context)
        company_vat = company.vat
        party_identifier = False
        if company_vat:
            country_code = company_vat[0:2].upper()
            if country_code == 'BE':
                party_identifier = company_vat[2:].replace(' ', '')
            elif country_code == 'ES':
                party_identifier = company.initiating_party_issuer
        return party_identifier

    def _initiating_party_issuer_default(self, cr, uid, context=None):
        '''If you need to add support for an additionnal country, you can
        add an entry in the dict "party_issuer_per_country" here
        or inherit this function in the localization modules for
        your country'''
        initiating_party_issuer = ''
        # If your country require the 'Initiating Party Issuer', you should
        # contribute the entry for your country in the dict below
        party_issuer_per_country = {
            'BE': 'KBO-BCE',  # KBO-BCE = the registry of companies in Belgium
        }
        company_id = self._company_default_get(
            cr, uid, 'res.company', context=context)
        if company_id:
            company = self.browse(cr, uid, company_id, context=context)
            country_code = company.country_id.code
            initiating_party_issuer = party_issuer_per_country.get(
                country_code, '')
        return initiating_party_issuer

    def _initiating_party_issuer_def(self, cr, uid, context=None):
        return self._initiating_party_issuer_default(
            cr, uid, context=context)

    _defaults = {
        'initiating_party_issuer': _initiating_party_issuer_def,
    }
