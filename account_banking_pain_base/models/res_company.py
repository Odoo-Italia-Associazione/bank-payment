# -*- coding: utf-8 -*-
# Copyright (C) 2013-2017 Akretion <alexis.delattre@akretion.com>
# Copyright (C) 2014-2017 Serv. Tecnol. Avanzados - Pedro M. Baeza
# Copyright (C) 2016-2017 Antiun Ingenieria S.L. - Antonio Espinosa
# Copyright (C) 2016-2017 SHS-AV s.r.l. <https://www.zeroincombenze.it>
# License AGPL-3.0 or later (http://www.gnu.org/licenses/agpl.html).
#
# [2013: Akretion] First version
# [2017: SHS-AV] Italian localization

from openerp import models, fields, api
import logging

logger = logging.getLogger(__name__)


class ResCompany(models.Model):
    _inherit = 'res.company'

    initiating_party_issuer = fields.Char(
        string='Initiating Party Issuer', size=35,
        help="This will be used as the 'Initiating Party Issuer' in the "
        "PAIN files generated by Odoo.")
    initiating_party_identifier = fields.Char(
        string='Initiating Party Identifier', size=35,
        help="This will be used as the 'Initiating Party Identifier' in "
        "the PAIN files generated by Odoo.")

    @api.model
    def _default_initiating_party(self, company):
        '''This method is called from post_install.py, which itself is also
        called from migrations/7.0.0.2/post-migration.py'''
        party_issuer = self._get_initiating_party_identifier(
            company.id, context=None)
        logger.debug(
            'Calling _default_initiating_party on company %s', company.name)
        country_code = company.country_id.code
        if not company.initiating_party_issuer:
            if party_issuer:
                company.write({
                    'initiating_party_issuer': party_issuer})
                logger.info(
                    'Updated initiating_party_issuer on company %s',
                    company.name)
        party_identifier = False
        if not company.initiating_party_identifier:
            if company.vat and country_code:
                if country_code == 'BE':
                    party_identifier = company.vat[2:].replace(' ', '')
            if party_identifier:
                company.write({
                    'initiating_party_identifier': party_identifier})
                logger.info(
                    'Updated initiating_party_identifier on company %s',
                    company.name)

    @api.model
    def _get_country(self, company_obj, context=None):
        """Some fields are country dependent"""
        context = {} if context is None else context
        country_id = None
        country_code = None
        if company_obj.country_id:
            country_id = company_obj.country_id.id
            c_obj = self.env['res.country'].browse(country_id)
            country_code = c_obj.code
        elif company_obj.vat:
            country_code = company_obj.vat[0:2].upper()
            ids = self.env['res.country'].search([('code', '=', country_code)])
            if ids:
                country_id = ids[0].id
        return country_id, country_code

    @api.model
    def _get_initiating_party_identifier(
            self, company_id, party_type=None, context=None):
        '''The code here may be different from one country to another.
        If you need to add support for an additionnal country, you can
        contribute your code here or inherit this function in the
        localization modules for your country'''
        context = {} if context is None else context
        assert isinstance(company_id, int), 'Only one company ID'
        country_code = context.get('country_code')
        company = self.browse(company_id)
        if not country_code:
            country_id, country_code = self._get_country(company,
                                                         context=context)
        company_vat = company.vat
        party_identifier = False
        if country_code == 'BE':
            party_identifier = company_vat[2:].replace(' ', '')
        elif country_code == 'IT':
            party_identifier = company_vat[2:].replace(' ', '')
        return party_identifier
